// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: author1.proto

package goproject3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Auhtor1Client is the client API for Auhtor1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Auhtor1Client interface {
	Author1CreateService(ctx context.Context, in *AuthorCreateRequest1, opts ...grpc.CallOption) (*AuthorCreateResponse1, error)
}

type auhtor1Client struct {
	cc grpc.ClientConnInterface
}

func NewAuhtor1Client(cc grpc.ClientConnInterface) Auhtor1Client {
	return &auhtor1Client{cc}
}

func (c *auhtor1Client) Author1CreateService(ctx context.Context, in *AuthorCreateRequest1, opts ...grpc.CallOption) (*AuthorCreateResponse1, error) {
	out := new(AuthorCreateResponse1)
	err := c.cc.Invoke(ctx, "/Auhtor1/Author1CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Auhtor1Server is the server API for Auhtor1 service.
// All implementations must embed UnimplementedAuhtor1Server
// for forward compatibility
type Auhtor1Server interface {
	Author1CreateService(context.Context, *AuthorCreateRequest1) (*AuthorCreateResponse1, error)
	mustEmbedUnimplementedAuhtor1Server()
}

// UnimplementedAuhtor1Server must be embedded to have forward compatible implementations.
type UnimplementedAuhtor1Server struct {
}

func (UnimplementedAuhtor1Server) Author1CreateService(context.Context, *AuthorCreateRequest1) (*AuthorCreateResponse1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Author1CreateService not implemented")
}
func (UnimplementedAuhtor1Server) mustEmbedUnimplementedAuhtor1Server() {}

// UnsafeAuhtor1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Auhtor1Server will
// result in compilation errors.
type UnsafeAuhtor1Server interface {
	mustEmbedUnimplementedAuhtor1Server()
}

func RegisterAuhtor1Server(s grpc.ServiceRegistrar, srv Auhtor1Server) {
	s.RegisterService(&Auhtor1_ServiceDesc, srv)
}

func _Auhtor1_Author1CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AuthorCreateRequest1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Auhtor1Server).Author1CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Auhtor1/Author1CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Auhtor1Server).Author1CreateService(ctx, req.(*AuthorCreateRequest1))
	}
	return interceptor(ctx, in, info, handler)
}

// Auhtor1_ServiceDesc is the grpc.ServiceDesc for Auhtor1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Auhtor1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Auhtor1",
	HandlerType: (*Auhtor1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Author1CreateService",
			Handler:    _Auhtor1_Author1CreateService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "author1.proto",
}
