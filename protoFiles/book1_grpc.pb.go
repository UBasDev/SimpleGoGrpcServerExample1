// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.2
// source: book1.proto

package goproject3

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// Book1Client is the client API for Book1 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type Book1Client interface {
	Book1CreateService(ctx context.Context, in *BookCreateRequest1, opts ...grpc.CallOption) (*BookCreateResponse1, error)
}

type book1Client struct {
	cc grpc.ClientConnInterface
}

func NewBook1Client(cc grpc.ClientConnInterface) Book1Client {
	return &book1Client{cc}
}

func (c *book1Client) Book1CreateService(ctx context.Context, in *BookCreateRequest1, opts ...grpc.CallOption) (*BookCreateResponse1, error) {
	out := new(BookCreateResponse1)
	err := c.cc.Invoke(ctx, "/Book1/Book1CreateService", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Book1Server is the server API for Book1 service.
// All implementations must embed UnimplementedBook1Server
// for forward compatibility
type Book1Server interface {
	Book1CreateService(context.Context, *BookCreateRequest1) (*BookCreateResponse1, error)
	mustEmbedUnimplementedBook1Server()
}

// UnimplementedBook1Server must be embedded to have forward compatible implementations.
type UnimplementedBook1Server struct {
}

func (UnimplementedBook1Server) Book1CreateService(context.Context, *BookCreateRequest1) (*BookCreateResponse1, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Book1CreateService not implemented")
}
func (UnimplementedBook1Server) mustEmbedUnimplementedBook1Server() {}

// UnsafeBook1Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to Book1Server will
// result in compilation errors.
type UnsafeBook1Server interface {
	mustEmbedUnimplementedBook1Server()
}

func RegisterBook1Server(s grpc.ServiceRegistrar, srv Book1Server) {
	s.RegisterService(&Book1_ServiceDesc, srv)
}

func _Book1_Book1CreateService_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BookCreateRequest1)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(Book1Server).Book1CreateService(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/Book1/Book1CreateService",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(Book1Server).Book1CreateService(ctx, req.(*BookCreateRequest1))
	}
	return interceptor(ctx, in, info, handler)
}

// Book1_ServiceDesc is the grpc.ServiceDesc for Book1 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Book1_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "Book1",
	HandlerType: (*Book1Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Book1CreateService",
			Handler:    _Book1_Book1CreateService_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "book1.proto",
}
